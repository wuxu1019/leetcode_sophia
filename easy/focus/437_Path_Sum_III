"""
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

"""


class Solution(object):
    def pathSum(self, root, sum):
        if not root:
            return 0
        self.result = 0
        self.pathSumHelper(root, sum, 0, {0:1})
        return self.result
        
    def pathSumHelper(self, root, target, sofar, cache):
        if not root:
            return 0
        comp = root.val+sofar-target
        print cache
        if comp in cache:
            self.result += cache[comp]
        cache.setdefault(root.val+sofar, 0)
        cache[root.val+sofar] += 1
        self.pathSumHelper(root.left, target, root.val+sofar, cache)
        self.pathSumHelper(root.right, target, root.val+sofar, cache)
        cache[root.val+sofar] -= 1
