"""
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.
"""
class Solution(object):
    def isSymmetric(self, root):
        return self.isSymmetricHelp(root, root)
        
    def isSymmetricHelp(self, left, right):
        if not left and not right:
            return True
        if None in [left, right]:
            return False
        if left.val == right.val and self.isSymmetricHelp(left.left, right.right)\
            and self.isSymmetricHelp(left.right, right.left):
                
            return True
        return False
