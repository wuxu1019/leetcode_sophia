"""
Implement a MapSum class with insert, and sum methods.

For the method insert, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.

For the method sum, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.

Example 1:
Input: insert("apple", 3), Output: Null
Input: sum("ap"), Output: 3
Input: insert("app", 2), Output: Null
Input: sum("ap"), Output: 5

"""

class MapSum(object):

    def __init__(self):
        self.mp = {}
        """
        Initialize your data structure here.
        """
        

    def insert(self, key, val):
        if key in self.mp:
            self.mp[key]['value'] = val
        else:
            prefix = []
            for i in range(len(key)):
                prefix.append(key[:i+1])
            self.mp[key] = {
                'value' : val,
                'prefix' : prefix
            }
        """
        :type key: str
        :type val: int
        :rtype: void
        """
        

    def sum(self, prefix):
        return sum([v['value'] for k, v in self.mp.items() if prefix in v['prefix']])
        """
        :type prefix: str
        :rtype: int
        """
        
