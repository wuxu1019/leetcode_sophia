"""
Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)


"""

class Solution(object):
    def productExceptSelf(self, nums):
        i, j = 0, len(nums)-1
        p, q = 1, 1
        rt = [1] * len(nums)
        
        while i < len(nums):
            rt[i] *= p
            rt[j] *= q
            p *= nums[i]
            q *= nums[j]
            i, j = i+1, j-1
        return rt
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        
