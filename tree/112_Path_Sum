# DFS with stack and queue
# https://discuss.leetcode.com/topic/18433/python-solutions-dfs-recursively-dfs-stack-bfs-queue/2


class Solution(object):
    def hasPathSum(self, root, sum):
        if not root:
            return False
        self.hasPath = False
        def findPath(root, sum):
            if root.val == sum:
                if not root.left and not root.right:
                    self.hasPath = True
                    return
            if root.left:
                findPath(root.left, sum - root.val)
            if root.right:
                findPath(root.right, sum - root.val)
            return
        findPath(root, sum)
        return self.hasPath
        

class Solution(object):
    def hasPathSum(self, root, sum):
        if not root:
            return False
        
        if not root.left and not root.right and root.val == sum:
            return True
        else:
            return self.hasPathSum(root.left, sum - root.val) or \
                self.hasPathSum(root.right, sum - root.val)
        
